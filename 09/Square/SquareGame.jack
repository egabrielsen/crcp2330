// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beginning, the square is located at the top-left corner
 * of the screen. The arrow keys are used to move the square.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class SquareGame {

    // The square
    field Square player1;
    //field Square player2;
    field Circle circle;
    field Ball ball;

    // The square's movement direction
    field int player1direction; // 0=none,1=up,2=down,3=left,4=right
    //field int player2direction;
    field int circle_direction;

    /** Constructs a new Square Game. */
    constructor SquareGame new() {
        let player1 = Square.new(20, 100, 30);
        //let player2 = Square.new(480, 200, 50);
        let circle = Circle.new(200, 200, 5);
        let ball = Ball.new(20, 20, 5);
        let player1direction = 0;
        //let player2direction = 0;
        let circle_direction = 1;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do player1.dispose();
        do circle.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            do moveCircle();
             //waits for a key to be pressed.
            while (key = 0) {
                do updateDirection();
                let key = Keyboard.keyPressed();
                do moveCircle();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let player1direction = 1;
            }
            if (key = 133) {
                let player1direction = 2;
            }

            do updateDirection();

            // waits for the key to be released.
            while (~(key = 0)) {
                do updateDirection();
                let key = Keyboard.keyPressed();
                do movePlayer1();
                //do movePlayer2();
                do moveCircle();
            }
        }

        return;
	}

    method void updateDirection() {
      if ((ball.getX() > 400) & (circle_direction = 1)) {
        let circle_direction = 4;
      }
      if ((ball.getX() > 400) & (circle_direction = 2)) {
        let circle_direction = 3;
      }
      if ((ball.getY() < 30) & (circle_direction = 1)) {
        let circle_direction = 2;
      }
      if ((ball.getY() < 30) & (circle_direction = 4)) {
        let circle_direction = 3;
      }
      if ((ball.getX() < 30) & (circle_direction = 3)) {
        let circle_direction = 2;
      }
      if ((ball.getX() < 30) & (circle_direction = 4)) {
        let circle_direction = 1;
      }
      if ((ball.getY() > (250 - ball.getSize())) & (circle_direction = 3)) {
        let circle_direction = 4;
      }
      if ((ball.getY() > (250 - ball.getSize())) & (circle_direction = 2)) {
        let circle_direction = 1;
      }

      return;
    }

    /** Moves the square by 2 pixels in the current direction. */
    method void movePlayer1() {
        if (player1direction = 1) {
            do player1.moveUp();
        }
        if (player1direction = 2) {
            do player1.moveDown();
        }
        //do Sys.wait(5);
        return;
    }

    //method void movePlayer2() {
    //  if (player2direction = 1) {
    //      do player2.moveUp();
    //  }
    //  if (player2direction = 2) {
    //      do player2.moveDown();
    //  }
    //  return;
    //}

    method void moveCircle() {
      if (circle_direction = 1) {
        do ball.moveUp();
        do ball.moveRight();
      }
      if (circle_direction = 2) {
          do ball.moveDown();
          do ball.moveRight();
      }
      if (circle_direction = 3) {
          do ball.moveLeft();
          do ball.moveDown();
      }
      if (circle_direction = 4) {
          do ball.moveLeft();
          do ball.moveUp();
      }
      do Sys.wait(5);
      return;
    }
}
